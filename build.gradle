import groovy.json.JsonSlurper
import groovy.json.JsonOutput

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id "me.modmuss50.mod-publish-plugin" version "0.3.5"
    id 'org.spongepowered.mixin' version '0.7.+'
}

apply {
    // Fixes m1 macs having build time errors (#forgeplzfix)
//    from "https://raw.githubusercontent.com/mezz/JustEnoughItems/1.18/Forge/buildtools/AppleSiliconSupport.gradle"
}

version = "${mod_version}"
group = 'com.direwolf20.mininggadgets' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'mininggadgets'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: "${mc_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                mininggadgets {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                mininggadgets {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'mininggadgets', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                mininggadgets {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

// All jar files from this folder will be added automatically as runtime mod dependencies
def extraModsDir = "extra-mods"

repositories {
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }

    maven {
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
        content {
            includeGroup("mezz.jei")
        }
    }

    maven { url = "https://maven.architectury.dev" }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

mixin {
    add sourceSets.main, 'mixins.mininggadgets.refmap.json'
    config 'mixins.mininggadgets.json'
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Locally sourced extra mods for runtime (i.e. testing)
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
    }

    //JEI
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

//    runtimeOnly fg.deobf("curse.maven:inventory-tweaks-renewed:3102237")
//    runtimeOnly fg.deobf("curse.maven:lollipop-347954:3232534")
//    runtimeOnly fg.deobf("curse.maven:mekanism-268560:268560")

    runtimeOnly fg.deobf("curse.maven:charging-gadgets-399757:4617304")
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INHERIT

    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "mcversion": project.mc_version,
                "forgeversion": project.forge_version,
                "forgeshortversion": project.forge_version.split('\\.')[0],
                "forge_acceptable_range": project.forge_acceptable_range
    }

	doLast {
	    def jsonMinifyStart = System.currentTimeMillis()
	    def jsonMinified = 0
		def jsonBytesSaved = 0

	    fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
			File file = it
			jsonMinified++
			def oldLength = file.length()
			try {
                file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
                jsonBytesSaved += oldLength - file.length()
            } catch (Exception e) {
                println('Failed to minify ' + it + ' ' + e)
            }
		}

		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}

jar {
    manifest {
        attributes([
                "Specification-Title": "mininggadgets",
                "Specification-Vendor": "direwolf20",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"direwolf20",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifactId = project.archivesBaseName.toLowerCase()
        }
    }
}

def makeChangelog() {
    def changelogText = file("./CHANGELOG.md").text;

    def output = "";
    def readLines = false
    for (line in changelogText.lines()) {
        if (line.startsWith("### ") || line.startsWith("## ")) {
            if (readLines) {
                break;
            }

            if (line.contains("${mod_version}") && line.startsWith("### ")) {
                readLines = true;
            }
        }
        if (readLines) {
            output += line + "\n";
        }
    }

    return output.trim();
}


tasks.register("testChangelog") {
    group = "tests"

    doLast {
        println makeChangelog()
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    file = jar.archiveFile
    changelog = makeChangelog()
    type = STABLE

    modLoaders.add("neoforge")
    modLoaders.add("forge")

    curseforge {
        projectId = "351748"
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        minecraftVersions.add(project.mc_version)

        optional {
            slug = "charging-gadgets"
        }
    }

    github {
        repository = "direwolf20-mc/MiningGadgets"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
